package domain;

import antlr.SNBLexer;
import antlr.SNBParser;
import expression.AntlrToProgram;
import expression.ExpressionProcessor;
import expression.Program;
import expression.error.LexerErrorListener;
import expression.error.SyntaxErrorListener;
import javazoom.jl.decoder.JavaLayerException;
import org.antlr.v4.gui.TreeViewer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import output.OutputResult;
import views.MainApplication;


import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import java.awt.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Functions {
    public static List<String> outputs = new ArrayList<>();

    public static void compileAndRunProgram(String fileName) {
        SNBParser snbParser = getParser(fileName);

        //Tell ANTLR to build a parse tree
        //Parse from the start symbol - 'program'
        ParseTree antlrAST = snbParser.program();
        System.out.println(antlrAST.toStringTree(snbParser));

        if (MainApplication.debugCalled) {
            MainApplication.debugResultsTextArea.append(antlrAST.toStringTree(snbParser) + "\n");
        }

        MainApplication.treeViewer = new TreeViewer(Arrays.asList(snbParser.getRuleNames()),antlrAST);
        MainApplication.treeViewer.open();
        MainApplication.treeViewer.setScale(1);
        MainApplication.astViewTab.add(MainApplication.treeViewer);

        if (LexerErrorListener.hasError) {
            try {
                MainApplication.soundEffects.playMp3("lexical_error");
            }catch (JavaLayerException javaLayerException) {
                javaLayerException.printStackTrace();
            }
        }
        else {
            if (SyntaxErrorListener.hasError) {
                //Let the Syntax error be reported
                //System.out.println("Syntax error found.");
                try {
                    MainApplication.soundEffects.playMp3("syntax_error");
                }catch (JavaLayerException javaLayerException) {
                    javaLayerException.printStackTrace();
                }
            }
            else {
                //Create a visitor for converting the parse tree into Program/Declaration Objects
                AntlrToProgram programVisitor = new AntlrToProgram();
                Program program = programVisitor.visit(antlrAST);

                if (programVisitor.semanticErrors.isEmpty()) {
                    try {
                        MainApplication.soundEffects.playMp3("run_success");
                    }catch (JavaLayerException javaLayerException) {
                        javaLayerException.printStackTrace();
                    }

                    ExpressionProcessor expressionProcessor = new ExpressionProcessor(program.expressions);
                    //new OutputResult(expressionProcessor);
                    for (String evaluation : expressionProcessor.getEvaluationResults()) {
                        System.out.println(evaluation);
                        outputs.add(evaluation);
                        MainApplication.displayRunResultsTextArea.setForeground(Color.WHITE);
                        MainApplication.displayRunResultsTextArea.append(evaluation + "\n");
                    }

                    writeToFile(outputs);
                }
                else {
                    for (String error : programVisitor.semanticErrors) {
                        try {
                            MainApplication.soundEffects.playMp3("semantic_error");
                        }catch (JavaLayerException javaLayerException) {
                            javaLayerException.printStackTrace();
                        }
                        System.out.println(error);
                        MainApplication.displayRunResultsTextArea.append(error + "\n");
                    }
                }
            }
        }
    }

    private static SNBParser getParser(String fileName) {
        SNBParser snbParser = null;

        try {
            CharStream input = CharStreams.fromFileName(fileName); //character stream from sourcecode
            /* Creates a lexer for the input string to generate the tokens */
            SNBLexer snbLexer = new SNBLexer(input); //takes the source input and runs it into the lexical analyzer
            //Token Error Handling
            snbLexer.removeErrorListeners();
            snbLexer.addErrorListener(new LexerErrorListener());

            /* Stores the tokens generated by the lexer for the input string */
            CommonTokenStream tokenStream = new CommonTokenStream(snbLexer); //produces tokens or lexical units
            /*Creates a parser for generation of an Abstract Syntax Tree from the stream of tokens to identify context */
            snbParser = new SNBParser(tokenStream); //inputs tokens into parser of syntax analyzer which will produce a tree

            //Syntax Error Handling
            snbParser.removeErrorListeners();
            snbParser.addErrorListener(new SyntaxErrorListener());
        } catch (IOException e) {
            System.out.println("IOException found");
            //e.printStackTrace();
        }

        return snbParser;
    }

    private static void writeToFile(List<String> result) {
        String fileName = "output.txt";

        try {
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(fileName));
            for (String output: result) {
                bufferedWriter.append(output).append("\n");
            }
            bufferedWriter.flush();
            bufferedWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
